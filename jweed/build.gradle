plugins {
    id("io.micronaut.application") version "4.5.4"
    id("com.gradleup.shadow") version "8.3.7"
    id("io.micronaut.aot") version "4.5.4"
    id("jacoco")
    id("org.sonarqube") version "6.2.0.5505"
}

version = "0.1"
group = "me.bmordue"

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.jsonschema:micronaut-json-schema-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.servlet:micronaut-servlet-processor")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.jsonschema:micronaut-json-schema-annotations")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")
    testImplementation("io.micronaut.jsonschema:micronaut-json-schema-validation")
    testImplementation("org.mockito:mockito-core:5.2.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.2.0")
    testImplementation("org.mockito:mockito-inline:5.2.0")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    implementation("org.apache.jena:jena-core:4.10.0")
    implementation("org.apache.jena:jena-arq:4.10.0")
    implementation("org.apache.jena:jena-tdb2:4.10.0")
    implementation("org.jsoup:jsoup:1.17.2")
    implementation('org.mnode.ical4j:ical4j-vcard:1.0.0')
    implementation 'com.mpatric:mp3agic:0.9.1'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation 'org.bytedeco:javacv-platform:1.5.10'
    implementation 'jaxen:jaxen:2.0.0'
}


application {
    mainClass = "me.bmordue.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("jetty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("me.bmordue.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "21"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters'
    ]
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Configure JaCoCo agent to exclude external libraries from instrumentation
tasks.withType(Test).configureEach {
    jacoco {
        includes = ['me.bmordue.*']
        excludes = [
                'java.*',
                'javax.*',
                'kotlin.*',
                'kotlinx.*',
                'org.apache.*',
                'org.junit.*',
                'org.mockito.*',
                'io.micronaut.*',
                'org.testcontainers.*',
                'com.fasterxml.*',
                'org.slf4j.*',
                'ch.qos.logback.*'
        ]
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: [
                    'me/bmordue/**'
            ], exclude: [
                    '**/Application.class',
                    '**/*Configuration*.class',
                    '**/*Config*.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% coverage threshold
            }
        }
    }
}


// SonarQube configuration
sonar {
    properties {
        property "sonar.projectKey", "bmordue_redweed"
        property "sonar.organization", "bmordue-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.source", "21"
        property "sonar.java.target", "21"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.exclusions", "**/Application.java"
    }
}
