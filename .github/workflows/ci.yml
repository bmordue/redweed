name: Clojure CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Nix
      uses: cachix/install-nix-action@v20
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Run tests
      run: nix-shell --run "cd rwclj && clj -X:test"

    - name: Run mutation tests
      run: nix-shell --run "cd rwclj && clj -M:mutate -m bin.mutate"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: rwclj/target/junit.xml
        if-no-files-found: warn # 'warn' or 'ignore' are also available

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: always()
      with:
        report_paths: 'rwclj/target/junit.xml'

#    - name: Generate coverage report
#      run: nix-shell --run "cd rwclj && clj -M:coverage"

#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v3
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }} # Optional: if you have a private repo or need to specify
#        files: ./rwclj/target/coverage/codecov.json # Path to the coverage report
#        working-directory: ./rwclj # Specifies the directory where clojure files are, also where codecov.json is created relative to.
#        fail_ci_if_error: true

#    - name: Build uberjar (optional)
#      run: nix-shell --run "cd rwclj && clj -M:uberjar"

  sonarqube:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin' # Optional 'temurin' or 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/deps.edn') }}
          restore-keys: ${{ runner.os }}-m2
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Replace with your SonarQube server URL
        with:
          args: >
            -Dsonar.projectKey=bmordue_redweed
            -Dsonar.organization=bmordue-github
            -Dsonar.sources=rwclj/src
            -Dsonar.tests=rwclj/test
            -Dsonar.junit.reportPaths=rwclj/target/junit.xml
            -Dsonar.java.binaries=rwclj/target/classes # Adjust if necessary
            -Dsonar.clojure.file.suffixes=.clj,.cljs,.cljc # Assuming a Clojure plugin might use this
            -Dsonar.sourceEncoding=UTF-8
